swagger: "2.0"
info:
  description: "This is a sample server Retail server"
  version: "1.0.0"
  title: "Swagger Retail Service"
  contact:
    email: "pooja2k4@gmail.com"
host: "localhost:8080"
basePath: "/products"
schemes:
- "http"
paths:
  /:
    post:
      tags:
      - "Product"
      summary: "Add a new product to the service"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the service"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "400":
          description: "Invalid input"
  /{id}:
    put:
      tags:
      - "Product"
      summary: "Update an existing product"
      description: ""
      operationId: "updatePriceForProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Product object that needs to be updated to the service"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "400":
          description: "Invalid input"
        "404":
          description: "Id not found"
    get:
      tags:
      - "Product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProduct"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
definitions:
  Product:
    type: "object"
    properties:
      name:
        type: "string"
        format: "Product name"
      id:
        type: "integer"
        format: "int64"
      current_price:
        type: "object"
        properties:
          value:
            type: "object"
            format: " double"
          currency_code:
            type: "string"
            format: "Currency code"
            enum:
            - "USD"
            - "EUR"
            - "HRK"
            - "INR"
  
    xml:
      name: "Product"